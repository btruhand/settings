set encoding=utf-8
scriptencoding utf-8

"""""""""""""""""""""
" PERSONAL TWEAKS/SETTINGS
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype plugin indent on
syntax on
set number
if !has('gui_running')
	set t_Co=256
endif
colors stereokai

" LEADER
let mapleader = "."

" Derek Wyatt's bare minimum plus preferences
set hidden
set showmode
nmap <Leader>e :e ~/.vimrc<CR>
nmap <Leader>o :so ~/.vimrc<CR>
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch

set wrap linebreak nolist
set showbreak=>\ \ \

" Rolodex Vim
function! ToggleMaxWins()
	if exists('g:windowMax')
		au! maxCurrWin
		wincmd =
		unlet g:windowMax
	else
		augroup maxCurrWin
			au! WinEnter * wincmd _
		augroup END
		do maxCurrWin WinEnter
		let g:windowMax=1
	endif
endfunction

" Auto commenting disabled for all files
autocmd FileType * setlocal formatoptions-=cr
" Encoding
set fileencodings=utf-8,iso-2022-jp,euc-jp,cp932,default,latin1
set encoding=utf-8
" Tabs
autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType python setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
autocmd FileType ant setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType xml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType json setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType eruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType markdown setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType sh setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType uml setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType ctp setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd BufRead,BufNewFile *.jade set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd FileType groovy setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Automatically remove trailing whitespace
autocmd BufWritePre * %s/\s\+$//e

" Stop backup
set nobackup

" Share clipboard
set clipboard=unnamed

" Set statusline
set laststatus=2

set tags=./tags,tags;

" REMAPS
map <C-n> :NERDTreeToggle<CR>
map <C-t> :TagbarToggle<CR>
nnoremap <Left> <C-w>h
nnoremap <Right> <C-w>l
nnoremap <Up> <C-w>k
nnoremap <Down> <C-w>j

nnoremap <S-j> :m+1<CR>
nnoremap <S-k> :m-2<CR>

nnoremap <Leader><Left> <C-w>s
nnoremap <Leader><Right> <C-w>v

nnoremap <S-w>q :wq!<CR>
nnoremap <S-c> :q!<CR>
nnoremap <S-s> :w!<CR>

nnoremap <Leader>n :bn<CR>
nnoremap <Leader>b :bp<CR>
nnoremap <Leader>m :buffers<CR>

nnoremap <Leader>max :call ToggleMaxWins()<CR>
nnoremap <silent> { :exe "resize " . (winheight(0) * 9/10)<CR>
nnoremap <silent> } :exe "resize " . (winheight(0) * 10/9)<CR>
nnoremap <silent> [ :exe "vertical resize " . (winwidth(0) * 9/10)<CR>
nnoremap <silent> ] :exe "vertical resize " . (winwidth(0) * 10/9)<CR>

nnoremap <Leader>f :CtrlP<CR>

" CTAGS RELATED
nnoremap <C-f> <C-]>
nnoremap <C-c> <C-t>
nnoremap <Leader>s :tselect<CR>

vnoremap <C-j> gj
vnoremap <C-k> gk
vnoremap <Leader>4 g$
vnoremap <Leader>0 g^
nnoremap <C-j> gj
nnoremap <C-k> gk
nnoremap <Leader>4 g$
nnoremap <Leader>0 g^

"""""""""""""""""""""

" NERDTree
let NERDTreeShowBookmarks=1

let python_highlight_all = 1
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" syntax checkers
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_php_checkers = ['php','phpcs']
let g:syntastic_php_phpcs_args = "-s --encoding=utf-8 --severity=1"
let g:syntastic_aggregate_errors = 1

if emoji#available()
  let g:syntastic_error_symbol = emoji#for('boom')
  let g:syntastic_style_error_symbol = emoji#for('dizzy_face')
  let g:syntastic_warning_symbol = emoji#for('mask')
  let g:syntastic_style_warning_symbol = emoji#for('neutral_face')
endif

let g:php_syntax_extensions_enabled = ["core","date","curl","dom","json","mbstring","iconv","pdo","spl","reflection","standard","hash","tokenizer","bcmath"]

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$'
  \ }
let g:ctrlp_working_path_mode = 'r'

"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" END OF EXAMPLE

" VUNDLE SETTINGS
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'StanAngeloff/php.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'hdima/python-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'majutsushi/tagbar'
Plugin 'vim-syntastic/syntastic'
Plugin 'Valloric/YouCompleteMe'
Plugin 'digitaltoad/vim-pug'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'ternjs/tern_for_vim'
Plugin 'aklt/plantuml-syntax'
Plugin 'itchyny/lightline.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'junegunn/vim-emoji'
Plugin 'sheerun/vim-polyglot'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
if !exists("g:syntax_on")
	syntax enable
endif
syntax enable
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" for php.vim
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" YCM settings
let g:ycm_min_num_identifier_candidate_chars = 5
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_max_num_candidates=20
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_add_preview_to_completeopt = 1

" lightline settings
let g:lightline = {
	\'colorscheme': 'seoul256',
	\'active': {
	\	'left': [['mode','paste'],['readonly'],['modified'],['gitbranch','filename']],
	\	'right': [['lineinfo','percent'],['filetype','fileencoding','fileformat']],
	\},
	\'component_function': {
	\	'mode': 'LightlineMode',
	\	'filename': 'LightlineFilename',
	\	'fileformat': 'LightlineFileformat',
	\	'filetype': 'LightlineFiletype',
	\	'fileencoding': 'LightlineFileencoding',
	\	'gitbranch': 'LightlineFugitive'
	\}
	\}

function! LightlineMode()
  let fname = expand('%:t')
  return fname =~ '__Tagbar__' ? 'Tagbar' :
  	\ fname == 'ControlP' ? 'CtrlP' :
	\ fname =~ 'NERD_tree' ? 'NERDTree' :
	\ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
	return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
	return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineReadonly()
	return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightlineModified()
	return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction


function! LightlineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
	\ fname =~ '__Tagbar__' ? g:lightline.fname :
	\ fname =~ '__Gundo\|NERD_tree' ? '' :
	\ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
	\ ('' != fname ? fname : '[No Name]') .
	\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
	let g:lightline.fname = a:fname
	return lightline#statusline(0)
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
	call lightline#link('iR'[g:lightline.ctrlp_regex])
	return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
	  \ , g:lightline.ctrlp_next], 0)
  else
	return ''
  endif
endfunction

let g:ctrlp_status_func = {
\ 'main': 'CtrlPStatusFunc_1',
\ 'prog': 'CtrlPStatusFunc_2',
\ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
	let g:lightline.ctrlp_regex = a:regex
	let g:lightline.ctrlp_prev = a:prev
	let g:lightline.ctrlp_item = a:item
	let g:lightline.ctrlp_next = a:next
	return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
	return lightline#statusline(0)
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction
